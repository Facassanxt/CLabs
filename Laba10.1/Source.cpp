#include <iostream>
#include <math.h>
#include <Windows.h>
#include <conio.h>
#include <locale.h>
#include <Bitset>

using namespace std;


//ДИНАМИЧЕСКАЯ БИБИЛИОТЕКА 
// 1) .dll - donemyc link labriary и .co - в линукс 
// в отличие от lib файлов,фргаменты которого дописываются к приложению во времня конпоновки 
// в dll машинный код содержится в виде отдельных файлов библиотек и размещается 
// на ПК пользователя вместе с .exe файлом.

// Премущества:
// 1) Использование несколькими приложениями
// 2) Статическая библиотека должна быть дописана 

// НЕдостатки:
// 1) СЛожная процедура развертывания на машине пользователя 
// Инсталятор должен содержать dll и размещать их в директорию
// 2) т.к библиотеки являются отельными файлами их можно удалить (случайно)
// Подключение библиотек в проект более трудоемкое чем для статисческих библиотек


// ТИПЫ ПРИВЯЗКИ ДИНАМИЧЕСКИХ БИБЛИОТЕК
// СТатическое(не кявное) к Динамическое(явное) связывание динамических библиотек
// Для статической связки потребуется dll библиотека и lib и *.h
// При статической связки приложение жестко зависит от динамических библиотек
// Dll загружается в память к системным загрузчикам сразу при уст/запуске приложения
// Если какая-либо из dll отсутствует OC завершает приложения аварийно 
// Так же должно строго выполнятся версия библиотек

// Для не янвого подключению нужно несколько файлов 1)dll 2)заголовки 3)таблицы ссылок lib 

// Для динамической связки необходимы Dll и заголовки
// При динамическом связывании динамических библиотек, разработчик сам прописывает 
// момент загрузки и выгрузки, а так же поиск нужных функций без таблицы  
// Более надежен и гибок, но трудоемен для разработчика

// Правила подключения динамических библиотек не явным методом так же как у статических
// + можно размещать рядом с .exe
//

int main()
{
	long double d, a, b, c;
	cin >> a >> b >> c;
	d = (b*b) - (4 * a*c);
	if (d > 0)
	{
		int x1, x2;
		x1 = (-b + sqrt(d)) / (2 * a);
		x2 = (-b - sqrt(d)) / (2 * a);
		cout << "Two roots: " << x1 << " " << x2;
	}
	else
		if (d == 0)
		{
			cout << "One root:" << " " << -b / (2 * a) << endl;
		}
		else
			cout << "No roots" << endl;

	system("Pause");
	return 0;
}
